Start fetching updates...
(Exit with Ctrl + C)
Start fetching updates...
(Exit with Ctrl + C)
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running

   Longman\TelegramBot\Exception\InvalidBotTokenException 

  Invalid bot token!

  at vendor/longman/telegram-bot/src/Request.php:722
    718â–• 
    719â–•         $response = new ServerResponse($response, $bot_username);
    720â–• 
    721â–•         if (!$response->isOk() && $response->getErrorCode() === 401 && $response->getDescription() === 'Unauthorized') {
  âžœ 722â–•             throw new InvalidBotTokenException();
    723â–•         }
    724â–• 
    725â–•         // Special case for sent polls, which need to be saved specially.
    726â–•         // @todo Take into account if DB gets extracted into separate module.

      [2m+26 vendor frames [22m
  27  artisan:37
      Illuminate\Foundation\Console\Kernel::handle()
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running

   Longman\TelegramBot\Exception\InvalidBotTokenException 

  Invalid bot token!

  at vendor/longman/telegram-bot/src/Request.php:722
    718â–• 
    719â–•         $response = new ServerResponse($response, $bot_username);
    720â–• 
    721â–•         if (!$response->isOk() && $response->getErrorCode() === 401 && $response->getDescription() === 'Unauthorized') {
  âžœ 722â–•             throw new InvalidBotTokenException();
    723â–•         }
    724â–• 
    725â–•         // Special case for sent polls, which need to be saved specially.
    726â–•         // @todo Take into account if DB gets extracted into separate module.

      [2m+26 vendor frames [22m
  27  artisan:37
      Illuminate\Foundation\Console\Kernel::handle()
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
Conflict: terminated by other getUpdates request; make sure that only one bot instance is running
0 Start fetching updates...
(Exit with Ctrl + C)
PHP Fatal error:  Allowed memory size of 134217728 bytes exhausted (tried to allocate 58515392 bytes) in /var/www/html/theoda/vendor/longman/telegram-bot/src/TelegramLog.php on line 105

   Symfony\Component\ErrorHandler\Error\FatalError 

  Allowed memory size of 134217728 bytes exhausted (tried to allocate 58515392 bytes)

  at vendor/longman/telegram-bot/src/TelegramLog.php:105
    101â–•             rewind(self::$debug_log_temp_stream_handle);
    102â–•             $stream_contents = stream_get_contents(self::$debug_log_temp_stream_handle);
    103â–• 
    104â–•             if (self::$remove_bot_token) {
  âžœ 105â–•                 $stream_contents = preg_replace('/\/bot(\d+):[\w\-]+\//', '/botBOT_TOKEN_REMOVED/', $stream_contents);
    106â–•             }
    107â–• 
    108â–•             self::debug(sprintf($message, $stream_contents));
    109â–•             fclose(self::$debug_log_temp_stream_handle);


   Whoops\Exception\ErrorException 

  Allowed memory size of 134217728 bytes exhausted (tried to allocate 58515392 bytes)

  at vendor/longman/telegram-bot/src/TelegramLog.php:105
    101â–•             rewind(self::$debug_log_temp_stream_handle);
    102â–•             $stream_contents = stream_get_contents(self::$debug_log_temp_stream_handle);
    103â–• 
    104â–•             if (self::$remove_bot_token) {
  âžœ 105â–•                 $stream_contents = preg_replace('/\/bot(\d+):[\w\-]+\//', '/botBOT_TOKEN_REMOVED/', $stream_contents);
    106â–•             }
    107â–• 
    108â–•             self::debug(sprintf($message, $stream_contents));
    109â–•             fclose(self::$debug_log_temp_stream_handle);

      [2m+1 vendor frames [22m
  2   [internal]:0
      Whoops\Run::handleShutdown()
0 Start fetching updates...
(Exit with Ctrl + C)

   TypeError 

  count(): Argument #1 ($value) must be of type Countable|array, null given

  at vendor/php-telegram-bot/laravel/src/Console/Commands/TelegramFetchCommand.php:71
     67â–• 				
     68â–• 				//$this->info($response->result);
     69â–• 				
     70â–• 				
  âžœ  71â–• 				if(count($response->result)>0){
     72â–• 					$chat_id = $response->result[0]->raw_data['message']['chat']['id'];
     73â–• 					\DB::table('bot_chat')->where('id', '=', $chat_id)->update(['status_chat' => 1]);
     74â–• 				}
     75â–•                 if ($response !== null && ! $response->isOk()) {

      [2m+14 vendor frames [22m
  15  artisan:37
      Illuminate\Foundation\Console\Kernel::handle()
